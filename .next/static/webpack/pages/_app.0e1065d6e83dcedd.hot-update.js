"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./src/features/medicalSlice.js":
/*!**************************************!*\
  !*** ./src/features/medicalSlice.js ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkWorking: function() { return /* binding */ checkWorking; },\n/* harmony export */   fetchHeartAttack: function() { return /* binding */ fetchHeartAttack; }\n/* harmony export */ });\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @reduxjs/toolkit */ \"./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n\n\nconst fetchHeartAttack = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAsyncThunk)(\"medical/heartAttackPrediction\", async (details)=>{\n    const response = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(\"/api/heartRate\", details);\n    return response;\n});\nconst initialState = {\n    heartRate: \"\",\n    isLoading: false\n};\nconst medicalSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createSlice)({\n    name: \"medical\",\n    initialState,\n    reducers: {\n        checkWorking: (state)=>{\n            console.log(\"asd\");\n        }\n    },\n    extraReducers: {\n        [fetchHeartAttack.pending]: (state)=>{\n            state.isLoading = true;\n        },\n        [fetchHeartAttack.fulfilled]: (state, action)=>{\n            state.isLoading = false;\n            state.heartRate = action.payload;\n        },\n        [fetchHeartAttack.rejected]: (state)=>{\n            state.isLoading = false;\n        }\n    }\n});\nconst { checkWorking } = medicalSlice.actions;\n/* harmony default export */ __webpack_exports__[\"default\"] = (medicalSlice.reducer);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZmVhdHVyZXMvbWVkaWNhbFNsaWNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBaUU7QUFDdkM7QUFFbkIsTUFBTUcsbUJBQW1CRixrRUFBZ0JBLENBQzlDLGlDQUNBLE9BQU9HO0lBQ0wsTUFBTUMsV0FBVyxNQUFNSCxrREFBVSxDQUFFLGtCQUFpQkU7SUFDcEQsT0FBT0M7QUFDVCxHQUNBO0FBRUYsTUFBTUUsZUFBZTtJQUNuQkMsV0FBVztJQUNYQyxXQUFXO0FBQ2I7QUFFQSxNQUFNQyxlQUFlViw2REFBV0EsQ0FBQztJQUMvQlcsTUFBTTtJQUNOSjtJQUNBSyxVQUFVO1FBQ1JDLGNBQWMsQ0FBQ0M7WUFDYkMsUUFBUUMsR0FBRyxDQUFDO1FBQ2Q7SUFDRjtJQUNBQyxlQUFlO1FBQ2IsQ0FBQ2QsaUJBQWlCZSxPQUFPLENBQUMsRUFBRSxDQUFDSjtZQUMzQkEsTUFBTUwsU0FBUyxHQUFHO1FBQ3BCO1FBQ0EsQ0FBQ04saUJBQWlCZ0IsU0FBUyxDQUFDLEVBQUUsQ0FBQ0wsT0FBT007WUFDcENOLE1BQU1MLFNBQVMsR0FBRztZQUNsQkssTUFBTU4sU0FBUyxHQUFHWSxPQUFPQyxPQUFPO1FBQ2xDO1FBQ0EsQ0FBQ2xCLGlCQUFpQm1CLFFBQVEsQ0FBQyxFQUFFLENBQUNSO1lBQzVCQSxNQUFNTCxTQUFTLEdBQUc7UUFDcEI7SUFDRjtBQUNGO0FBRU8sTUFBTSxFQUFFSSxZQUFZLEVBQUUsR0FBR0gsYUFBYWEsT0FBTyxDQUFDO0FBQ3JELCtEQUFlYixhQUFhYyxPQUFPLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2ZlYXR1cmVzL21lZGljYWxTbGljZS5qcz8zY2M1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVNsaWNlLCBjcmVhdGVBc3luY1RodW5rIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcclxuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGZldGNoSGVhcnRBdHRhY2sgPSBjcmVhdGVBc3luY1RodW5rKFxyXG4gIFwibWVkaWNhbC9oZWFydEF0dGFja1ByZWRpY3Rpb25cIixcclxuICBhc3luYyAoZGV0YWlscykgPT4ge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wb3N0KGAvYXBpL2hlYXJ0UmF0ZWAsIGRldGFpbHMpO1xyXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gIH1cclxuKTtcclxuXHJcbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcclxuICBoZWFydFJhdGU6IFwiXCIsXHJcbiAgaXNMb2FkaW5nOiBmYWxzZVxyXG59O1xyXG5cclxuY29uc3QgbWVkaWNhbFNsaWNlID0gY3JlYXRlU2xpY2Uoe1xyXG4gIG5hbWU6IFwibWVkaWNhbFwiLFxyXG4gIGluaXRpYWxTdGF0ZSxcclxuICByZWR1Y2Vyczoge1xyXG4gICAgY2hlY2tXb3JraW5nOiAoc3RhdGUpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coJ2FzZCcpO1xyXG4gICAgfSxcclxuICB9LFxyXG4gIGV4dHJhUmVkdWNlcnM6IHtcclxuICAgIFtmZXRjaEhlYXJ0QXR0YWNrLnBlbmRpbmddOiAoc3RhdGUpID0+IHtcclxuICAgICAgc3RhdGUuaXNMb2FkaW5nID0gdHJ1ZTtcclxuICAgIH0sXHJcbiAgICBbZmV0Y2hIZWFydEF0dGFjay5mdWxmaWxsZWRdOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xyXG4gICAgICBzdGF0ZS5pc0xvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgc3RhdGUuaGVhcnRSYXRlID0gYWN0aW9uLnBheWxvYWRcclxuICAgIH0sXHJcbiAgICBbZmV0Y2hIZWFydEF0dGFjay5yZWplY3RlZF06IChzdGF0ZSkgPT4ge1xyXG4gICAgICBzdGF0ZS5pc0xvYWRpbmcgPSBmYWxzZTtcclxuICAgIH0sXHJcbiAgfSxcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3QgeyBjaGVja1dvcmtpbmcgfSA9IG1lZGljYWxTbGljZS5hY3Rpb25zO1xyXG5leHBvcnQgZGVmYXVsdCBtZWRpY2FsU2xpY2UucmVkdWNlcjtcclxuIl0sIm5hbWVzIjpbImNyZWF0ZVNsaWNlIiwiY3JlYXRlQXN5bmNUaHVuayIsImF4aW9zIiwiZmV0Y2hIZWFydEF0dGFjayIsImRldGFpbHMiLCJyZXNwb25zZSIsInBvc3QiLCJpbml0aWFsU3RhdGUiLCJoZWFydFJhdGUiLCJpc0xvYWRpbmciLCJtZWRpY2FsU2xpY2UiLCJuYW1lIiwicmVkdWNlcnMiLCJjaGVja1dvcmtpbmciLCJzdGF0ZSIsImNvbnNvbGUiLCJsb2ciLCJleHRyYVJlZHVjZXJzIiwicGVuZGluZyIsImZ1bGZpbGxlZCIsImFjdGlvbiIsInBheWxvYWQiLCJyZWplY3RlZCIsImFjdGlvbnMiLCJyZWR1Y2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/features/medicalSlice.js\n"));

/***/ })

});